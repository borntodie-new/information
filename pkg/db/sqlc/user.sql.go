// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (nickname,
                   username,
                   hashed_password,
                   phone,
                   email)
VALUES ($1, $2, $3, $4, $5) RETURNING id, nickname, username, hashed_password, phone, email, avatar, last_login_at, created_at, updated_at
`

type CreateUserParams struct {
	Nickname       string `json:"nickname"`
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Phone          string `json:"phone"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Nickname,
		arg.Username,
		arg.HashedPassword,
		arg.Phone,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Username,
		&i.HashedPassword,
		&i.Phone,
		&i.Email,
		&i.Avatar,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, nickname, username, hashed_password, phone, email, avatar, last_login_at, created_at, updated_at
FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Username,
		&i.HashedPassword,
		&i.Phone,
		&i.Email,
		&i.Avatar,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, nickname, username, hashed_password, phone, email, avatar, last_login_at, created_at, updated_at
FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Username,
		&i.HashedPassword,
		&i.Phone,
		&i.Email,
		&i.Avatar,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, nickname, username, hashed_password, phone, email, avatar, last_login_at, created_at, updated_at
FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Username,
		&i.HashedPassword,
		&i.Phone,
		&i.Email,
		&i.Avatar,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
